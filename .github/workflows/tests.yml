name: Tests

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest
    name: Run Tests
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'pull_request' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync

      - name: Set up test environment
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          echo "Setting up test database..."

      - name: Run pytest with coverage
        id: pytest
        run: |
          echo "## 🧪 Pytest Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          uv run pytest -v --tb=short --cov=app --cov-report=term --cov-report=html --cov-report=xml 2>&1 | tee pytest-results.txt || true
          
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pytest-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate coverage badge
        if: always()
        run: |
          if [ -f coverage.xml ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")")
            echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Code Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          
            if (( $(echo "$COVERAGE > 80" | bc -l) )); then
              COLOR="brightgreen"
            elif (( $(echo "$COVERAGE > 60" | bc -l) )); then
              COLOR="yellow"
            else
              COLOR="red"
            fi
          
            echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR})" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
            .coverage
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-results.txt
          retention-days: 30

      - name: Check test results
        run: |
          if grep -q "FAILED" pytest-results.txt; then
            FAILED_COUNT=$(grep -c "FAILED" pytest-results.txt || echo "0")
            echo "## ❌ Test Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failed tests:** $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the test results above and fix failing tests." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            PASSED_COUNT=$(grep -c "PASSED" pytest-results.txt || echo "0")
            echo "## ✅ Test Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**All tests passed!** ($PASSED_COUNT tests)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi 